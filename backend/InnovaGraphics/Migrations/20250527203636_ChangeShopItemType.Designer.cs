// <auto-generated />
using System;
using InnovaGraphics.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InnovaGraphics.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250527203636_ChangeShopItemType")]
    partial class ChangeShopItemType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatMessageRecipient", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecipientId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MessageId", "RecipientId");

                    b.HasIndex("RecipientId");

                    b.ToTable("ChatMessageRecipients", (string)null);
                });

            modelBuilder.Entity("ExerciseUser", b =>
                {
                    b.Property<Guid>("ExercisesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ExercisesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ExerciseUser");
                });

            modelBuilder.Entity("HintUser", b =>
                {
                    b.Property<Guid>("HintsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HintsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("HintUser");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("InnovaGraphics.Models.Battle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HostUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpponentUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HostUserId");

                    b.HasIndex("OpponentUserId");

                    b.HasIndex("TestId");

                    b.ToTable("Battle");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Case", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Case");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Certificate");
                });

            modelBuilder.Entity("InnovaGraphics.Models.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeOnly>("Timestamp")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("InnovaGraphics.Models.CompetitionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BattleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsWinner")
                        .HasColumnType("bit");

                    b.Property<string>("Rival")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BattleId");

                    b.HasIndex("UserId");

                    b.ToTable("CompetitionInfo");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlanetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Reward")
                        .HasColumnType("int");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Method", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlanetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProgrammingLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.ToTable("Method");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Planet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentHintCount")
                        .HasColumnType("int");

                    b.Property<int>("EnergyLost")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUnlock")
                        .HasColumnType("bit");

                    b.Property<int>("MaxHintCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("RequiredEnergy")
                        .HasColumnType("int");

                    b.Property<string>("SubTopic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Planet");
                });

            modelBuilder.Entity("InnovaGraphics.Models.PlanetInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("PlanetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("UsedCoinCount")
                        .HasColumnType("int");

                    b.Property<int>("UsedEnergyCount")
                        .HasColumnType("int");

                    b.Property<int>("UsedMarkCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.ToTable("PlanetInfo");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutMyself")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BackgroundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GitHubLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstagramLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedInLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MusicThemeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("BackgroundId")
                        .IsUnique()
                        .HasFilter("[BackgroundId] IS NOT NULL");

                    b.HasIndex("MusicThemeId")
                        .IsUnique()
                        .HasFilter("[MusicThemeId] IS NOT NULL");

                    b.HasIndex("ResourceId")
                        .IsUnique()
                        .HasFilter("[ResourceId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ShopItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ShopItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("InnovaGraphics.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("InnovaGraphics.Models.ShopItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ShopItem", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("InnovaGraphics.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsQuickTest")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlanetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TestResult")
                        .HasColumnType("int");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("TimeLimit")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Theory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlanetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.ToTable("Theory");
                });

            modelBuilder.Entity("InnovaGraphics.Models.TokenManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Expires")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TokenManager");
                });

            modelBuilder.Entity("InnovaGraphics.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BackgroundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CoinCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EnergyCount")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MarkCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("MusicThemeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PlanetAccessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("BackgroundId");

                    b.HasIndex("GroupId");

                    b.HasIndex("MusicThemeId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PlanetAccessId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("TeacherId")
                        .IsUnique()
                        .HasFilter("[TeacherId] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("InnovaGraphics.Models.UserTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTest");
                });

            modelBuilder.Entity("MaterialUser", b =>
                {
                    b.Property<Guid>("MaterialsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MaterialsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("MaterialUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PlanetUser", b =>
                {
                    b.Property<Guid>("PlanetsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlanetsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("PlanetUser");
                });

            modelBuilder.Entity("TestUser", b =>
                {
                    b.Property<Guid>("TestsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TestsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TestUser");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Avatar", b =>
                {
                    b.HasBaseType("InnovaGraphics.Models.ShopItem");

                    b.ToTable("Avatar", (string)null);
                });

            modelBuilder.Entity("InnovaGraphics.Models.Background", b =>
                {
                    b.HasBaseType("InnovaGraphics.Models.ShopItem");

                    b.ToTable("Background", (string)null);
                });

            modelBuilder.Entity("InnovaGraphics.Models.Hint", b =>
                {
                    b.HasBaseType("InnovaGraphics.Models.ShopItem");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid>("PlanetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("PlanetId");

                    b.ToTable("Hint", (string)null);
                });

            modelBuilder.Entity("InnovaGraphics.Models.MusicTheme", b =>
                {
                    b.HasBaseType("InnovaGraphics.Models.ShopItem");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("MusicTheme", (string)null);
                });

            modelBuilder.Entity("InnovaGraphics.Models.PlanetAccess", b =>
                {
                    b.HasBaseType("InnovaGraphics.Models.ShopItem");

                    b.Property<Guid>("PlanetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("PlanetId")
                        .IsUnique()
                        .HasFilter("[PlanetId] IS NOT NULL");

                    b.ToTable("PlanetAccess", (string)null);
                });

            modelBuilder.Entity("InnovaGraphics.Models.Resource", b =>
                {
                    b.HasBaseType("InnovaGraphics.Models.ShopItem");

                    b.Property<string>("Subtype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.ToTable("Resource", (string)null);
                });

            modelBuilder.Entity("ChatMessageRecipient", b =>
                {
                    b.HasOne("InnovaGraphics.Models.ChatMessage", null)
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InnovaGraphics.Models.User", null)
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExerciseUser", b =>
                {
                    b.HasOne("InnovaGraphics.Models.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExercisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InnovaGraphics.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HintUser", b =>
                {
                    b.HasOne("InnovaGraphics.Models.Hint", null)
                        .WithMany()
                        .HasForeignKey("HintsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InnovaGraphics.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InnovaGraphics.Models.Answer", b =>
                {
                    b.HasOne("InnovaGraphics.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Battle", b =>
                {
                    b.HasOne("InnovaGraphics.Models.User", "HostUser")
                        .WithMany("HostBattles")
                        .HasForeignKey("HostUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InnovaGraphics.Models.User", "OpponentUser")
                        .WithMany("OpponentBattles")
                        .HasForeignKey("OpponentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InnovaGraphics.Models.Test", "Test")
                        .WithMany("Battles")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HostUser");

                    b.Navigation("OpponentUser");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Case", b =>
                {
                    b.HasOne("InnovaGraphics.Models.Exercise", "Exercise")
                        .WithMany("Cases")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Certificate", b =>
                {
                    b.HasOne("InnovaGraphics.Models.User", "User")
                        .WithOne("Certificate")
                        .HasForeignKey("InnovaGraphics.Models.Certificate", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InnovaGraphics.Models.ChatMessage", b =>
                {
                    b.HasOne("InnovaGraphics.Models.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("InnovaGraphics.Models.CompetitionInfo", b =>
                {
                    b.HasOne("InnovaGraphics.Models.Battle", "Battle")
                        .WithMany("CompetitionInfos")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InnovaGraphics.Models.User", "User")
                        .WithMany("CompetitionInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Exercise", b =>
                {
                    b.HasOne("InnovaGraphics.Models.Planet", "Planet")
                        .WithMany("Exercises")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Method", b =>
                {
                    b.HasOne("InnovaGraphics.Models.Planet", "Planet")
                        .WithMany("Methods")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("InnovaGraphics.Models.PlanetInfo", b =>
                {
                    b.HasOne("InnovaGraphics.Models.Planet", "Planet")
                        .WithMany("PlanetInfos")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Profile", b =>
                {
                    b.HasOne("InnovaGraphics.Models.Avatar", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("InnovaGraphics.Models.Background", "Background")
                        .WithOne("Profile")
                        .HasForeignKey("InnovaGraphics.Models.Profile", "BackgroundId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("InnovaGraphics.Models.MusicTheme", "MusicTheme")
                        .WithOne("Profile")
                        .HasForeignKey("InnovaGraphics.Models.Profile", "MusicThemeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("InnovaGraphics.Models.Resource", "Resource")
                        .WithOne("Profile")
                        .HasForeignKey("InnovaGraphics.Models.Profile", "ResourceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("InnovaGraphics.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("InnovaGraphics.Models.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avatar");

                    b.Navigation("Background");

                    b.Navigation("MusicTheme");

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Purchase", b =>
                {
                    b.HasOne("InnovaGraphics.Models.ShopItem", "ShopItem")
                        .WithMany("Purchases")
                        .HasForeignKey("ShopItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InnovaGraphics.Models.User", "User")
                        .WithMany("Purchases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShopItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Question", b =>
                {
                    b.HasOne("InnovaGraphics.Models.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Test", b =>
                {
                    b.HasOne("InnovaGraphics.Models.Planet", "Planet")
                        .WithMany("Tests")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Theory", b =>
                {
                    b.HasOne("InnovaGraphics.Models.Planet", "Planet")
                        .WithMany("Theories")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("InnovaGraphics.Models.User", b =>
                {
                    b.HasOne("InnovaGraphics.Models.Avatar", null)
                        .WithMany("Users")
                        .HasForeignKey("AvatarId");

                    b.HasOne("InnovaGraphics.Models.Background", null)
                        .WithMany("Users")
                        .HasForeignKey("BackgroundId");

                    b.HasOne("InnovaGraphics.Models.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InnovaGraphics.Models.MusicTheme", null)
                        .WithMany("Users")
                        .HasForeignKey("MusicThemeId");

                    b.HasOne("InnovaGraphics.Models.PlanetAccess", null)
                        .WithMany("Users")
                        .HasForeignKey("PlanetAccessId");

                    b.HasOne("InnovaGraphics.Models.Resource", null)
                        .WithMany("Users")
                        .HasForeignKey("ResourceId");

                    b.HasOne("InnovaGraphics.Models.Teacher", "Teacher")
                        .WithOne("User")
                        .HasForeignKey("InnovaGraphics.Models.User", "TeacherId");

                    b.Navigation("Group");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("InnovaGraphics.Models.UserTest", b =>
                {
                    b.HasOne("InnovaGraphics.Models.Test", "Test")
                        .WithMany("UserTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InnovaGraphics.Models.User", "User")
                        .WithMany("UserTests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaterialUser", b =>
                {
                    b.HasOne("InnovaGraphics.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InnovaGraphics.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InnovaGraphics.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InnovaGraphics.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InnovaGraphics.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InnovaGraphics.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlanetUser", b =>
                {
                    b.HasOne("InnovaGraphics.Models.Planet", null)
                        .WithMany()
                        .HasForeignKey("PlanetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InnovaGraphics.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestUser", b =>
                {
                    b.HasOne("InnovaGraphics.Models.Test", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InnovaGraphics.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InnovaGraphics.Models.Avatar", b =>
                {
                    b.HasOne("InnovaGraphics.Models.ShopItem", null)
                        .WithOne()
                        .HasForeignKey("InnovaGraphics.Models.Avatar", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InnovaGraphics.Models.Background", b =>
                {
                    b.HasOne("InnovaGraphics.Models.ShopItem", null)
                        .WithOne()
                        .HasForeignKey("InnovaGraphics.Models.Background", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InnovaGraphics.Models.Hint", b =>
                {
                    b.HasOne("InnovaGraphics.Models.ShopItem", null)
                        .WithOne()
                        .HasForeignKey("InnovaGraphics.Models.Hint", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InnovaGraphics.Models.Planet", "Planet")
                        .WithMany("Hints")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("InnovaGraphics.Models.MusicTheme", b =>
                {
                    b.HasOne("InnovaGraphics.Models.ShopItem", null)
                        .WithOne()
                        .HasForeignKey("InnovaGraphics.Models.MusicTheme", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InnovaGraphics.Models.PlanetAccess", b =>
                {
                    b.HasOne("InnovaGraphics.Models.ShopItem", null)
                        .WithOne()
                        .HasForeignKey("InnovaGraphics.Models.PlanetAccess", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InnovaGraphics.Models.Planet", "Planet")
                        .WithOne("PlanetAccess")
                        .HasForeignKey("InnovaGraphics.Models.PlanetAccess", "PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Resource", b =>
                {
                    b.HasOne("InnovaGraphics.Models.ShopItem", null)
                        .WithOne()
                        .HasForeignKey("InnovaGraphics.Models.Resource", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InnovaGraphics.Models.Battle", b =>
                {
                    b.Navigation("CompetitionInfos");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Exercise", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Group", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Planet", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("Hints");

                    b.Navigation("Methods");

                    b.Navigation("PlanetAccess")
                        .IsRequired();

                    b.Navigation("PlanetInfos");

                    b.Navigation("Tests");

                    b.Navigation("Theories");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("InnovaGraphics.Models.ShopItem", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Teacher", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("InnovaGraphics.Models.Test", b =>
                {
                    b.Navigation("Battles");

                    b.Navigation("Questions");

                    b.Navigation("UserTests");
                });

            modelBuilder.Entity("InnovaGraphics.Models.User", b =>
                {
                    b.Navigation("Certificate")
                        .IsRequired();

                    b.Navigation("CompetitionInfos");

                    b.Navigation("HostBattles");

                    b.Navigation("OpponentBattles");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Purchases");

                    b.Navigation("SentMessages");

                    b.Navigation("UserTests");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Avatar", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Background", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("InnovaGraphics.Models.MusicTheme", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("InnovaGraphics.Models.PlanetAccess", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("InnovaGraphics.Models.Resource", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
